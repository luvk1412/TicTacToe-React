{"ast":null,"code":"import _slicedToArray from \"/home/luv/TicTacToe-React/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/luv/TicTacToe-React/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  const winstyle = {\n    backgroundColor: '#ccc'\n  };\n  return React.createElement(\"button\", {\n    className: \"square\",\n    onClick: () => props.onClick(),\n    style: props.winSqaure ? winstyle : null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, props.value);\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    let winstatus = null;\n\n    if (this.props.winningSquares) {\n      if (this.props.winningSquares.includes(i)) {\n        winstatus = true;\n      }\n    }\n\n    return React.createElement(Square, {\n      value: this.props.squares[i],\n      onClick: () => this.props.onClick(i),\n      winSqaure: winstatus,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    let boardMatrix = [];\n\n    for (let i = 0; i < 3; ++i) {\n      let boardRow = [];\n\n      for (let j = 0; j < 3; ++j) {\n        boardRow.push(React.createElement(\"span\", {\n          key: i * 3 + j,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39\n          },\n          __self: this\n        }, this.renderSquare(i * 3 + j)));\n      }\n\n      boardMatrix.push(React.createElement(\"div\", {\n        className: \"board-row\",\n        key: i,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, boardRow));\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, boardMatrix);\n  }\n\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n        clicked: null\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n      isAscending: true\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    if (this.state.xIsNext) {\n      squares[i] = 'X';\n    } else {\n      squares[i] = 'O';\n    }\n\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        clicked: i\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0\n    });\n  }\n\n  handleSort() {\n    this.setState({\n      isAscending: !this.state.isAscending\n    });\n  }\n\n  render() {\n    const bold = {\n      fontWeight: 'bold'\n    };\n    const normal = {\n      fontWeight: 'normal'\n    };\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const description = move ? 'Position : (' + (Math.floor(step.clicked / 3) + 1) + ',' + (step.clicked % 3 + 1) + '), Go to move # ' + move : 'Go to game start';\n      return React.createElement(\"li\", {\n        key: move,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        style: move === this.stepNumber ? bold : normal,\n        onClick: () => this.jumpTo(move),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, description));\n    });\n    let status;\n    let winningSquares = null;\n\n    if (winner) {\n      if (winner === 'draw') {\n        status = 'Match is Draw';\n      } else {\n        status = 'Winner : ' + winner;\n        winningSquares = winner.winningSquares;\n      }\n    } else {\n      status = 'Next Player : ' + (this.state.xIsNext ? 'X' : ' O');\n    }\n\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(Board, {\n      squares: current.squares,\n      onClick: i => this.handleClick(i),\n      winningSquares: winningSquares,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, status), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      onClick: () => this.handleSort(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Reverse Moves list\")), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, this.state.isAscending ? moves : moves.reverse())));\n  }\n\n}\n\nfunction calculateWinner(squares) {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n  for (let i = 0; i < lines.length; i++) {\n    const _lines$i = _slicedToArray(lines[i], 3),\n          a = _lines$i[0],\n          b = _lines$i[1],\n          c = _lines$i[2];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return {\n        winner: squares[a],\n        winningSquares: lines[i]\n      };\n    }\n  }\n\n  for (let i = 0; i < squares.length; i++) {\n    if (!squares[i]) {\n      return null;\n    }\n  }\n\n  return 'draw';\n} // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 185\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/home/luv/TicTacToe-React/src/index.js"],"names":["React","ReactDOM","Square","props","winstyle","backgroundColor","onClick","winSqaure","value","Board","Component","renderSquare","i","winstatus","winningSquares","includes","squares","render","boardMatrix","boardRow","j","push","Game","constructor","state","history","Array","fill","clicked","stepNumber","xIsNext","isAscending","handleClick","slice","current","length","calculateWinner","setState","concat","jumpTo","step","handleSort","bold","fontWeight","normal","winner","moves","map","move","description","Math","floor","status","reverse","lines","a","b","c","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction Square(props) {\n    const winstyle = {\n        backgroundColor:'#ccc',\n    }\n    return (\n        <button className=\"square\" onClick={() => props.onClick() } style={props.winSqaure ? winstyle : null}>\n            {props.value}\n        </button>\n    );\n}\n  \nclass Board extends React.Component {\n    renderSquare(i) {\n        let winstatus = null;\n        if(this.props.winningSquares){\n            if(this.props.winningSquares.includes(i)){\n                winstatus = true;\n            }\n        }\n        return (\n            <Square \n                value = {this.props.squares[i]}\n                onClick = {()=>this.props.onClick(i)}\n                winSqaure = {winstatus}\n            />\n        );\n    }\n\n    render() {\n        let boardMatrix = [];\n        for (let i = 0; i < 3; ++i){\n            let boardRow = [];\n            for (let j = 0; j < 3; ++j){\n                boardRow.push(<span key={i*3+j}>{this.renderSquare(i*3+j)}</span>);\n            }\n            boardMatrix.push(<div className=\"board-row\" key={i}>{boardRow}</div>);\n        }\n        return (\n            <div>\n                {boardMatrix}\n            </div>\n        );\n    }\n}\n\n\nclass Game extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            history : [{\n                squares : Array(9).fill(null),\n                clicked : null,\n            }],\n            stepNumber : 0,\n            xIsNext : true,\n            isAscending : true,\n        }\n    }\n    handleClick(i){\n        const history = this.state.history.slice(0, this.state.stepNumber+1);\n        const current = history[history.length-1];\n        const squares = current.squares.slice();\n        if(calculateWinner(squares) ||  squares[i]){\n            return;\n        }\n        if(this.state.xIsNext){\n            squares[i] = 'X';\n        }\n        else{\n            squares[i] = 'O';\n        }\n        this.setState({\n            history : history.concat([{\n                squares : squares,\n                clicked : i,\n            }]),\n            stepNumber : history.length,\n            xIsNext : !this.state.xIsNext,\n        });\n    }\n\n    jumpTo(step){\n        this.setState({\n            stepNumber : step,\n            xIsNext : (step % 2) === 0,\n        });\n    }\n    handleSort(){\n        this.setState({\n            isAscending : !this.state.isAscending,\n        });\n    }\n    render() {\n        const bold = {\n            fontWeight : 'bold'\n        };\n        const normal = {\n            fontWeight : 'normal'\n        }\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n        const moves = history.map((step, move) => {\n            const description = move ? ('Position : (' + (Math.floor(step.clicked/3)+1) + ',' + (step.clicked % 3 + 1) +'), Go to move # ' + move) : 'Go to game start';\n            return (\n                <li key ={move}>\n                    <button style={move===this.stepNumber ? bold : normal} onClick={() => this.jumpTo(move)}>{description}</button>\n                </li>\n            ) \n        });\n\n        let status;\n        let winningSquares = null;\n        if(winner){\n            if(winner === 'draw'){\n                status = 'Match is Draw';\n            }\n            else{\n                status = 'Winner : ' + winner;\n                winningSquares = winner.winningSquares;\n            }\n        }\n        else{\n            status = 'Next Player : ' + (this.state.xIsNext ? 'X' : ' O');\n        }\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={(i) => this.handleClick(i)}\n                        winningSquares = {winningSquares}/>\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <div>\n                        <button onClick={()=>this.handleSort()}>Reverse Moves list</button>\n                    </div>\n                    <ol>{this.state.isAscending ?  moves : moves.reverse()}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nfunction calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return {\n            winner : squares[a],\n            winningSquares : lines[i],\n        };\n      }\n    }\n    for (let i = 0; i < squares.length; i++){\n        if(!squares[i]){\n            return null;\n        }\n    }\n    return 'draw';\n}\n\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n"]},"metadata":{},"sourceType":"module"}